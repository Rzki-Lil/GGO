{"version":3,"file":"static/js/155.23c0287b.chunk.js","mappings":"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","sources":["components/PredictionsTable.jsx","components/MatchInputs.jsx"],"sourcesContent":["import React, { memo, useState } from \"react\";\r\nimport { isDeterministic } from \"../utils/gameUtils\";\r\n\r\nconst TableRow = memo(\r\n  ({\r\n    round,\r\n    player1Display,\r\n    player8Display,\r\n    noteText,\r\n    isSelected,\r\n    onRowClick,\r\n  }) => {\r\n    // Modify player displays to use white text when selected\r\n    const modifiedPlayer1Display =\r\n      isSelected && player1Display && player1Display.props\r\n        ? React.cloneElement(player1Display, {\r\n            className: player1Display.props.className\r\n              .replace(\"text-emerald-300\", \"text-white\")\r\n              .replace(\"text-indigo-400\", \"text-white\"),\r\n          })\r\n        : player1Display;\r\n\r\n    const modifiedPlayer8Display =\r\n      isSelected && player8Display && player8Display.props\r\n        ? React.cloneElement(player8Display, {\r\n            className: player8Display.props.className\r\n              .replace(\"text-indigo-300\", \"text-white\")\r\n              .replace(\"text-indigo-400\", \"text-white\")\r\n              .replace(\"text-gray-400\", \"text-white\"),\r\n          })\r\n        : player8Display;\r\n\r\n    // More prominent and GitHub-compatible highlight styling\r\n    return (\r\n      <tr\r\n        onClick={() => onRowClick(round)}\r\n        className={`\r\n          border-b border-gray-800\r\n          ${isDeterministic(round) ? \"bg-violet-900/20\" : \"bg-gray-900/80\"}\r\n          ${\r\n            isSelected ? \"!bg-emerald-800 border-l-4 !border-l-emerald-500\" : \"\"\r\n          }\r\n          hover:bg-gray-800 transition-colors cursor-pointer\r\n        `}\r\n      >\r\n        <td\r\n          className={`px-3 py-2 text-sm whitespace-nowrap ${\r\n            isSelected ? \"text-white\" : \"text-gray-200\"\r\n          }`}\r\n        >\r\n          {round}\r\n        </td>\r\n        <td className=\"px-3 py-2 text-sm font-medium whitespace-nowrap\">\r\n          {modifiedPlayer1Display}\r\n        </td>\r\n        <td className=\"px-3 py-2 text-sm whitespace-nowrap\">\r\n          {modifiedPlayer8Display}\r\n        </td>\r\n        <td\r\n          className={`px-3 py-2 text-sm ${\r\n            isSelected ? \"text-white\" : \"text-gray-200\"\r\n          }`}\r\n        >\r\n          {noteText}\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n);\r\n\r\nconst PredictionsTable = memo(\r\n  ({\r\n    currentRound,\r\n    opponents,\r\n    playerNames,\r\n    firstOpponentId,\r\n    t,\r\n    getOpponentDisplay,\r\n  }) => {\r\n    const [selectedRound, setSelectedRound] = useState(null);\r\n\r\n    const handleRowClick = (round) => {\r\n      setSelectedRound(selectedRound === round ? null : round);\r\n    };\r\n\r\n    const getNoteText = (round) => {\r\n      switch (round) {\r\n        case 1:\r\n        case 2:\r\n        case 4:\r\n          return (\r\n            <span className=\"font-medium text-violet-300\">\r\n              {t.noteTexts.random}\r\n            </span>\r\n          );\r\n        case 3:\r\n          return (\r\n            <span className=\"font-medium text-violet-300\">\r\n              {t.noteTexts.swapR2}\r\n            </span>\r\n          );\r\n        case 5:\r\n          return (\r\n            <span className=\"font-medium text-violet-300\">\r\n              {t.noteTexts.swapR4}\r\n            </span>\r\n          );\r\n        case 6:\r\n          return (\r\n            <span className=\"font-medium text-violet-300\">\r\n              {t.noteTexts.r3R5}\r\n            </span>\r\n          );\r\n        case 7:\r\n          return (\r\n            <span className=\"font-medium text-violet-300\">\r\n              {t.noteTexts.swapR6}\r\n            </span>\r\n          );\r\n        default:\r\n          return null;\r\n      }\r\n    };\r\n\r\n    // Custom hook to modify opponent display for player1 to use green color\r\n    const getCustomOpponentDisplay = (player, round) => {\r\n      const display = getOpponentDisplay(player, round);\r\n\r\n      if (display && display.props) {\r\n        if (player === \"player1\") {\r\n          if (display.props.className.includes(\"text-indigo-300\")) {\r\n            // For actual player names, make them emerald\r\n            return React.cloneElement(display, {\r\n              className: display.props.className.replace(\r\n                \"text-indigo-300\",\r\n                \"text-emerald-300\"\r\n              ),\r\n            });\r\n          } else if (display.props.className.includes(\"text-indigo-400\")) {\r\n            return display;\r\n          }\r\n        }\r\n      }\r\n\r\n      return display;\r\n    };\r\n\r\n    return (\r\n      <div className=\"mt-4 overflow-hidden border rounded-lg shadow-lg bg-gray-900/95 border-violet-500/30\">\r\n        <div className=\"px-4 py-2 bg-gradient-to-r from-violet-900/80 via-indigo-900/80 to-purple-900/80\">\r\n          <h2 className=\"text-lg font-bold text-white\">{t.predictions}</h2>\r\n        </div>\r\n        <div className=\"overflow-x-auto\">\r\n          <table className=\"min-w-full border-collapse\">\r\n            <thead className=\"bg-gray-800/90\">\r\n              <tr>\r\n                <th className=\"px-3 py-2 text-xs font-medium tracking-wider text-left text-indigo-300\">\r\n                  {t.round}\r\n                </th>\r\n                <th className=\"px-3 py-2 text-xs font-medium tracking-wider text-left text-emerald-300\">\r\n                  {t.yourOpponent}\r\n                </th>\r\n                <th className=\"px-3 py-2 text-xs font-medium tracking-wider text-left text-indigo-300\">\r\n                  {playerNames[firstOpponentId] + t.opponentOf}\r\n                </th>\r\n                <th className=\"px-3 py-2 text-xs font-medium tracking-wider text-left text-indigo-300\">\r\n                  {t.notes}\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {Array.from({ length: currentRound }, (_, i) => i + 1).map(\r\n                (round) => (\r\n                  <TableRow\r\n                    key={round}\r\n                    round={round}\r\n                    player1Display={getCustomOpponentDisplay(\"player1\", round)}\r\n                    player8Display={getOpponentDisplay(\"player8\", round)}\r\n                    noteText={getNoteText(round)}\r\n                    isSelected={selectedRound === round}\r\n                    onRowClick={handleRowClick}\r\n                  />\r\n                )\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default PredictionsTable;\r\n","import React from \"react\";\r\nimport PredictionsTable from \"./PredictionsTable\";\r\nimport {\r\n  isDeterministic,\r\n  getAllUsedOpponents,\r\n  getRound3Opponent,\r\n  getFirstRound3Opponent,\r\n} from \"../utils/gameUtils\";\r\n\r\nconst SelectedPlayer = React.memo(\r\n  ({ playerId, playerNames, className = \"\" }) => {\r\n    if (!playerId) return null;\r\n    return (\r\n      <div\r\n        className={`px-3 py-2 mb-2 text-sm font-medium text-white bg-indigo-600/50 rounded-lg border border-indigo-500/30 ${className}`}\r\n      >\r\n        <span>{playerNames[playerId]}</span>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nconst MatchInputs = ({\r\n  opponents,\r\n  setOpponents,\r\n  playerNames,\r\n  firstOpponentId,\r\n  currentRound,\r\n  t,\r\n  round3OpponentR5Match,\r\n  setRound3OpponentR5Match,\r\n  firstRound3OpponentR5Match,\r\n  setFirstRound3OpponentR5Match,\r\n  handleOpponentChange,\r\n  handleFirstOpponentChange,\r\n  resetMatchData,\r\n}) => {\r\n  const getOpponentOptions = (playerNumber) => {\r\n    const usedOpponents = getAllUsedOpponents(\r\n      opponents,\r\n      round3OpponentR5Match,\r\n      firstRound3OpponentR5Match\r\n    );\r\n\r\n    return (\r\n      <>\r\n        <option value=\"\">{t.select}</option>\r\n        <option key={0} value={0} className=\"bg-red-800\">\r\n          {playerNames[0]}\r\n        </option>\r\n        {[1, 2, 3, 4, 5, 6, 7, 8]\r\n          .filter((i) => i !== playerNumber && !usedOpponents.has(i))\r\n          .map((i) => (\r\n            <option key={i} value={i} className=\"bg-gray-700\">\r\n              {playerNames[i]}\r\n            </option>\r\n          ))}\r\n      </>\r\n    );\r\n  };\r\n\r\n  const getR24OpponentOptions = (playerNumber, round) => {\r\n    const usedOpponents = getAllUsedOpponents(\r\n      opponents,\r\n      round3OpponentR5Match,\r\n      firstRound3OpponentR5Match\r\n    );\r\n\r\n    return (\r\n      <>\r\n        <option value=\"\">{t.select}</option>\r\n        <option value=\"0\" className=\"bg-red-800\">\r\n          {playerNames[0]}\r\n        </option>\r\n        {[2, 3, 4, 5, 6, 7, 8].map((id) => {\r\n          if (id !== playerNumber && !usedOpponents.has(id)) {\r\n            return (\r\n              <option key={id} value={id} className=\"bg-gray-700\">\r\n                {playerNames[id]}\r\n              </option>\r\n            );\r\n          }\r\n          return null;\r\n        })}\r\n      </>\r\n    );\r\n  };\r\n\r\n  const getOpponentDisplay = (player, round) => {\r\n    const playerNum = player === \"player1\" ? 1 : 8;\r\n    const opponent = opponents[player][round];\r\n\r\n    if (opponent) {\r\n      return (\r\n        <span className=\"font-medium text-indigo-300\">\r\n          {playerNames[opponent]}\r\n        </span>\r\n      );\r\n    }\r\n\r\n    if (isDeterministic(round)) {\r\n      if (\r\n        (round === 6 &&\r\n          playerNum === 1 &&\r\n          getRound3Opponent(opponents) &&\r\n          !round3OpponentR5Match) ||\r\n        (round === 6 &&\r\n          playerNum === 8 &&\r\n          getFirstRound3Opponent(opponents) &&\r\n          !firstRound3OpponentR5Match)\r\n      ) {\r\n        return (\r\n          <span className=\"font-medium text-indigo-400\">{t.needInput}</span>\r\n        );\r\n      }\r\n\r\n      if (\r\n        (round === 3 && !opponents.player8[2] && player === \"player1\") ||\r\n        (round === 3 && !opponents.player1[2] && player === \"player8\") ||\r\n        (round === 5 && !opponents.player8[4] && player === \"player1\") ||\r\n        (round === 5 && !opponents.player1[4] && player === \"player8\")\r\n      ) {\r\n        return <span className=\"font-medium text-indigo-400\">{t.waiting}</span>;\r\n      }\r\n\r\n      return <span className=\"font-medium text-indigo-400\">{t.predict}</span>;\r\n    }\r\n\r\n    return <span className=\"text-gray-400\">{t.notSet}</span>;\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-4 transition-all border rounded-lg shadow-xl bg-gray-900/80 backdrop-blur-md border-violet-500/30 hover:shadow-violet-500/10 lg:col-span-2\">\r\n      <div className=\"flex items-center justify-between mb-4\">\r\n        <h2 className=\"text-lg font-bold text-white\">{t.matchInputs}</h2>\r\n        <button\r\n          onClick={resetMatchData}\r\n          className=\"px-3 py-1 text-xs font-medium text-white transition-colors rounded-md shadow-md bg-red-700/90 hover:bg-red-600\"\r\n        >\r\n          {t.resetMatches}\r\n        </button>\r\n      </div>\r\n\r\n      {/* First Opponent Selector - Full Width Row */}\r\n      <div className=\"w-full p-3 mb-4 transition-all border rounded-lg shadow-lg bg-gray-800/90 border-violet-500/30 hover:border-violet-500/50\">\r\n        <h3 className=\"mb-3 text-base font-bold text-white\">\r\n          {t.firstOpponent}\r\n        </h3>\r\n        <div className=\"w-full\">\r\n          <SelectedPlayer\r\n            playerId={firstOpponentId}\r\n            playerNames={playerNames}\r\n          />\r\n          <select\r\n            value={firstOpponentId}\r\n            onChange={(e) => handleFirstOpponentChange(e.target.value)}\r\n            className=\"block w-full px-3 py-2 text-sm text-white transition-colors border rounded-lg outline-none bg-gray-700/90 border-violet-500/40 hover:border-violet-500 focus:border-violet-400\"\r\n          >\r\n            {[2, 3, 4, 5, 6, 7, 8].map((id) => (\r\n              <option key={id} value={id}>\r\n                {playerNames[id]}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Rounds 2 and 4 inputs in a separate flex container */}\r\n      <div className=\"flex flex-wrap gap-4\">\r\n        {/* Rounds 2 and 4 inputs */}\r\n        {[2, 4].map((round) => (\r\n          <div\r\n            key={`input-r${round}`}\r\n            className=\"flex-1 min-w-[180px] p-3 bg-gray-800/90 border border-violet-500/30 rounded-lg shadow-lg hover:border-violet-500/50 transition-all\"\r\n          >\r\n            <h3 className=\"mb-3 text-base font-bold text-white\">\r\n              Round {round}\r\n            </h3>\r\n\r\n            <div className=\"space-y-3\">\r\n              <div className=\"group\">\r\n                <label className=\"block mb-1 text-sm font-semibold text-indigo-200\">\r\n                  {t.yourOpponent}\r\n                </label>\r\n                <SelectedPlayer\r\n                  playerId={opponents.player1[round]}\r\n                  playerNames={playerNames}\r\n                />\r\n                <select\r\n                  value={opponents.player1[round] || \"\"}\r\n                  onChange={(e) =>\r\n                    handleOpponentChange(\"player1\", round, e.target.value)\r\n                  }\r\n                  className=\"block w-full px-3 py-2 text-sm text-white transition-colors border rounded-lg outline-none bg-gray-700/90 border-violet-500/40 hover:border-violet-500 focus:border-violet-400\"\r\n                >\r\n                  {getR24OpponentOptions(1, round)}\r\n                </select>\r\n              </div>\r\n\r\n              <div className=\"group\">\r\n                <label className=\"block mb-1 text-sm font-semibold text-indigo-200\">\r\n                  {playerNames[firstOpponentId]}'s {t.opponent}\r\n                </label>\r\n                <SelectedPlayer\r\n                  playerId={opponents.player8[round]}\r\n                  playerNames={playerNames}\r\n                />\r\n                <select\r\n                  value={opponents.player8[round] || \"\"}\r\n                  onChange={(e) =>\r\n                    handleOpponentChange(\"player8\", round, e.target.value)\r\n                  }\r\n                  className=\"block w-full px-3 py-2 text-sm text-white transition-colors border rounded-lg outline-none bg-gray-700/90 border-violet-500/40 hover:border-violet-500 focus:border-violet-400\"\r\n                >\r\n                  {getR24OpponentOptions(firstOpponentId, round)}\r\n                </select>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Round 6 Helpers - Only show the first helper */}\r\n      <div className=\"grid grid-cols-1 gap-4 mt-4\">\r\n        {/* Your R6 Helper */}\r\n        {opponents.player1[3] && (\r\n          <div className=\"p-3 overflow-hidden transition-all border rounded-lg shadow-lg bg-gray-800/90 border-violet-500/30 animate-fadeIn hover:border-violet-500/50\">\r\n            <h3 className=\"mb-2 text-sm font-bold text-violet-300\">\r\n              {t.r6Helper.you}\r\n            </h3>\r\n            <div className=\"space-y-2\">\r\n              <div className=\"text-sm text-gray-200\">\r\n                {t.r6Helper.yourR3}{\" \"}\r\n                <strong className=\"text-violet-200\">\r\n                  {playerNames[opponents.player1[3]]}\r\n                </strong>\r\n                {t.r6Helper.r5Match}\r\n              </div>\r\n              <SelectedPlayer\r\n                playerId={round3OpponentR5Match}\r\n                playerNames={playerNames}\r\n              />\r\n              <select\r\n                value={round3OpponentR5Match || \"\"}\r\n                onChange={(e) => {\r\n                  if (e.target.value === \"0\") {\r\n                    setRound3OpponentR5Match(null);\r\n                    setFirstRound3OpponentR5Match(null); // Reset second helper when first helper is canceled\r\n                    setOpponents((prev) => {\r\n                      const newOpponents = { ...prev };\r\n                      newOpponents.player1[6] = null;\r\n                      newOpponents.player8[6] = null; // Also reset opponent's R6 selection\r\n                      newOpponents.player1[7] = null;\r\n                      newOpponents.player8[7] = null;\r\n                      return newOpponents;\r\n                    });\r\n                  } else {\r\n                    setRound3OpponentR5Match(\r\n                      e.target.value === \"\" ? null : parseInt(e.target.value)\r\n                    );\r\n                  }\r\n                }}\r\n                className=\"block w-full px-3 py-2 text-sm text-white transition-colors border rounded-lg outline-none bg-gray-700/90 border-violet-500/40 hover:border-violet-500 focus:border-violet-400\"\r\n              >\r\n                {getOpponentOptions(opponents.player1[3])}\r\n              </select>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <PredictionsTable\r\n        currentRound={currentRound}\r\n        opponents={opponents}\r\n        playerNames={playerNames}\r\n        firstOpponentId={firstOpponentId}\r\n        t={t}\r\n        getOpponentDisplay={getOpponentDisplay}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(MatchInputs);\r\n"],"names":["TableRow","memo","_ref","round","player1Display","player8Display","noteText","isSelected","onRowClick","modifiedPlayer1Display","props","React","className","replace","modifiedPlayer8Display","_jsxs","onClick","isDeterministic","children","_jsx","_ref2","currentRound","opponents","playerNames","firstOpponentId","t","getOpponentDisplay","selectedRound","setSelectedRound","useState","handleRowClick","getNoteText","noteTexts","random","swapR2","swapR4","r3R5","swapR6","getCustomOpponentDisplay","player","display","includes","predictions","yourOpponent","opponentOf","notes","Array","from","length","_","i","map","SelectedPlayer","playerId","MatchInputs","setOpponents","round3OpponentR5Match","setRound3OpponentR5Match","firstRound3OpponentR5Match","setFirstRound3OpponentR5Match","handleOpponentChange","handleFirstOpponentChange","resetMatchData","getR24OpponentOptions","playerNumber","usedOpponents","getAllUsedOpponents","_Fragment","value","select","id","has","matchInputs","resetMatches","firstOpponent","onChange","e","target","player1","opponent","player8","r6Helper","you","yourR3","r5Match","prev","newOpponents","parseInt","filter","getOpponentOptions","PredictionsTable","playerNum","getRound3Opponent","getFirstRound3Opponent","needInput","waiting","predict","notSet"],"sourceRoot":""}