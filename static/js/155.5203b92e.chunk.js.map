{"version":3,"file":"static/js/155.5203b92e.chunk.js","mappings":"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","sources":["components/PredictionsTable.jsx","components/MatchInputs.jsx"],"sourcesContent":["import React, { memo } from \"react\";\r\nimport { isDeterministic } from \"../utils/gameUtils\";\r\n\r\nconst TableRow = memo(({ round, player1Display, player8Display, noteText }) => {\r\n\r\n  return (\r\n    <tr\r\n      className={`${\r\n        isDeterministic(round) ? \"bg-violet-900/20\" : \"bg-gray-900/80\"\r\n      } hover:bg-gray-800/90 transition-colors`}\r\n    >\r\n      <td className=\"px-3 py-2 text-sm text-gray-200 whitespace-nowrap\">\r\n        {round}\r\n      </td>\r\n      <td className=\"px-3 py-2 text-sm font-medium whitespace-nowrap text-emerald-300\">\r\n        {player1Display}\r\n      </td>\r\n      <td className=\"px-3 py-2 text-sm text-gray-200 whitespace-nowrap\">\r\n        {player8Display}\r\n      </td>\r\n      <td className=\"px-3 py-2 text-sm text-gray-200\">{noteText}</td>\r\n    </tr>\r\n  );\r\n});\r\n\r\nconst PredictionsTable = memo(\r\n  ({\r\n    currentRound,\r\n    opponents,\r\n    playerNames,\r\n    firstOpponentId,\r\n    t,\r\n    getOpponentDisplay,\r\n  }) => {\r\n    const getNoteText = (round) => {\r\n      switch (round) {\r\n        case 1:\r\n        case 2:\r\n        case 4:\r\n          return (\r\n            <span className=\"font-medium text-violet-300\">\r\n              {t.noteTexts.random}\r\n            </span>\r\n          );\r\n        case 3:\r\n          return (\r\n            <span className=\"font-medium text-violet-300\">\r\n              {t.noteTexts.swapR2}\r\n            </span>\r\n          );\r\n        case 5:\r\n          return (\r\n            <span className=\"font-medium text-violet-300\">\r\n              {t.noteTexts.swapR4}\r\n            </span>\r\n          );\r\n        case 6:\r\n          return (\r\n            <span className=\"font-medium text-violet-300\">\r\n              {t.noteTexts.r3R5}\r\n            </span>\r\n          );\r\n        case 7:\r\n          return (\r\n            <span className=\"font-medium text-violet-300\">\r\n              {t.noteTexts.swapR6}\r\n            </span>\r\n          );\r\n        default:\r\n          return null;\r\n      }\r\n    };\r\n\r\n    // Custom hook to modify opponent display for player1 to use green color\r\n    const getCustomOpponentDisplay = (player, round) => {\r\n      const display = getOpponentDisplay(player, round);\r\n\r\n      if (\r\n        player === \"player1\" &&\r\n        display &&\r\n        display.props &&\r\n        display.props.className.includes(\"text-indigo-300\")\r\n      ) {\r\n        // Clone the element but with emerald-300 text color for your opponents\r\n        return React.cloneElement(display, {\r\n          className: display.props.className.replace(\r\n            \"text-indigo-300\",\r\n            \"text-emerald-300\"\r\n          ),\r\n        });\r\n      }\r\n\r\n      return display;\r\n    };\r\n\r\n    return (\r\n      <div className=\"mt-4 overflow-hidden border rounded-lg shadow-lg bg-gray-900/95 border-violet-500/30\">\r\n        <div className=\"px-4 py-2 bg-gradient-to-r from-violet-900/80 via-indigo-900/80 to-purple-900/80\">\r\n          <h2 className=\"text-lg font-bold text-white\">{t.predictions}</h2>\r\n        </div>\r\n        <div className=\"overflow-x-auto\">\r\n          <table className=\"min-w-full divide-y divide-gray-700/50\">\r\n            <thead className=\"bg-gray-800/90\">\r\n              <tr>\r\n                <th className=\"px-3 py-2 text-xs font-medium tracking-wider text-left text-indigo-300\">\r\n                  {t.round}\r\n                </th>\r\n                <th className=\"px-3 py-2 text-xs font-medium tracking-wider text-left text-emerald-300\">\r\n                  {t.yourOpponent}\r\n                </th>\r\n                <th className=\"px-3 py-2 text-xs font-medium tracking-wider text-left text-indigo-300\">\r\n                  {playerNames[firstOpponentId] + t.opponentOf}\r\n                </th>\r\n                <th className=\"px-3 py-2 text-xs font-medium tracking-wider text-left text-indigo-300\">\r\n                  {t.notes}\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody className=\"divide-y divide-gray-800/50\">\r\n              {Array.from({ length: currentRound }, (_, i) => i + 1).map(\r\n                (round) => (\r\n                  <TableRow\r\n                    key={round}\r\n                    round={round}\r\n                    player1Display={getCustomOpponentDisplay(\"player1\", round)}\r\n                    player8Display={getOpponentDisplay(\"player8\", round)}\r\n                    noteText={getNoteText(round)}\r\n                  />\r\n                )\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default PredictionsTable;\r\n","import React from \"react\";\r\nimport PredictionsTable from \"./PredictionsTable\";\r\nimport {\r\n  isDeterministic,\r\n  getAllUsedOpponents,\r\n  getRound3Opponent,\r\n  getFirstRound3Opponent,\r\n} from \"../utils/gameUtils\";\r\n\r\nconst SelectedPlayer = React.memo(\r\n  ({ playerId, playerNames, className = \"\" }) => {\r\n    if (!playerId) return null;\r\n    return (\r\n      <div\r\n        className={`px-3 py-2 mb-2 text-sm font-medium text-white bg-indigo-600/50 rounded-lg border border-indigo-500/30 ${className}`}\r\n      >\r\n        <span>{playerNames[playerId]}</span>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nconst MatchInputs = ({\r\n  opponents,\r\n  setOpponents,\r\n  playerNames,\r\n  firstOpponentId,\r\n  currentRound,\r\n  t,\r\n  round3OpponentR5Match,\r\n  setRound3OpponentR5Match,\r\n  firstRound3OpponentR5Match,\r\n  setFirstRound3OpponentR5Match,\r\n  handleOpponentChange,\r\n  handleFirstOpponentChange,\r\n  resetMatchData,\r\n}) => {\r\n  const getOpponentOptions = (playerNumber) => {\r\n    const usedOpponents = getAllUsedOpponents(\r\n      opponents,\r\n      round3OpponentR5Match,\r\n      firstRound3OpponentR5Match\r\n    );\r\n\r\n    return (\r\n      <>\r\n        <option value=\"\">{t.select}</option>\r\n        <option key={0} value={0} className=\"bg-red-800\">\r\n          {playerNames[0]}\r\n        </option>\r\n        {[1, 2, 3, 4, 5, 6, 7, 8]\r\n          .filter((i) => i !== playerNumber && !usedOpponents.has(i))\r\n          .map((i) => (\r\n            <option key={i} value={i} className=\"bg-gray-700\">\r\n              {playerNames[i]}\r\n            </option>\r\n          ))}\r\n      </>\r\n    );\r\n  };\r\n\r\n  const getR24OpponentOptions = (playerNumber, round) => {\r\n    const usedOpponents = getAllUsedOpponents(\r\n      opponents,\r\n      round3OpponentR5Match,\r\n      firstRound3OpponentR5Match\r\n    );\r\n\r\n    return (\r\n      <>\r\n        <option value=\"\">{t.select}</option>\r\n        <option value=\"0\" className=\"bg-red-800\">\r\n          {playerNames[0]}\r\n        </option>\r\n        {[2, 3, 4, 5, 6, 7, 8].map((id) => {\r\n          if (id !== playerNumber && !usedOpponents.has(id)) {\r\n            return (\r\n              <option key={id} value={id} className=\"bg-gray-700\">\r\n                {playerNames[id]}\r\n              </option>\r\n            );\r\n          }\r\n          return null;\r\n        })}\r\n      </>\r\n    );\r\n  };\r\n\r\n  const getOpponentDisplay = (player, round) => {\r\n    const playerNum = player === \"player1\" ? 1 : 8;\r\n    const opponent = opponents[player][round];\r\n\r\n    if (opponent) {\r\n      return (\r\n        <span className=\"font-medium text-indigo-300\">\r\n          {playerNames[opponent]}\r\n        </span>\r\n      );\r\n    }\r\n\r\n    if (isDeterministic(round)) {\r\n      if (\r\n        (round === 6 &&\r\n          playerNum === 1 &&\r\n          getRound3Opponent(opponents) &&\r\n          !round3OpponentR5Match) ||\r\n        (round === 6 &&\r\n          playerNum === 8 &&\r\n          getFirstRound3Opponent(opponents) &&\r\n          !firstRound3OpponentR5Match)\r\n      ) {\r\n        return (\r\n          <span className=\"font-medium text-indigo-400\">{t.needInput}</span>\r\n        );\r\n      }\r\n\r\n      if (\r\n        (round === 3 && !opponents.player8[2] && player === \"player1\") ||\r\n        (round === 3 && !opponents.player1[2] && player === \"player8\") ||\r\n        (round === 5 && !opponents.player8[4] && player === \"player1\") ||\r\n        (round === 5 && !opponents.player1[4] && player === \"player8\")\r\n      ) {\r\n        return <span className=\"font-medium text-indigo-400\">{t.waiting}</span>;\r\n      }\r\n\r\n      return <span className=\"font-medium text-indigo-400\">{t.predict}</span>;\r\n    }\r\n\r\n    return <span className=\"text-gray-400\">{t.notSet}</span>;\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-4 transition-all border rounded-lg shadow-xl bg-gray-900/80 backdrop-blur-md border-violet-500/30 hover:shadow-violet-500/10 lg:col-span-2\">\r\n      <div className=\"flex items-center justify-between mb-4\">\r\n        <h2 className=\"text-lg font-bold text-white\">{t.matchInputs}</h2>\r\n        <button\r\n          onClick={resetMatchData}\r\n          className=\"px-3 py-1 text-xs font-medium text-white transition-colors rounded-md shadow-md bg-red-700/90 hover:bg-red-600\"\r\n        >\r\n          {t.resetMatches}\r\n        </button>\r\n      </div>\r\n\r\n      {/* First Opponent Selector - Full Width Row */}\r\n      <div className=\"w-full p-3 mb-4 transition-all border rounded-lg shadow-lg bg-gray-800/90 border-violet-500/30 hover:border-violet-500/50\">\r\n        <h3 className=\"mb-3 text-base font-bold text-white\">\r\n          {t.firstOpponent}\r\n        </h3>\r\n        <div className=\"w-full\">\r\n          <SelectedPlayer\r\n            playerId={firstOpponentId}\r\n            playerNames={playerNames}\r\n          />\r\n          <select\r\n            value={firstOpponentId}\r\n            onChange={(e) => handleFirstOpponentChange(e.target.value)}\r\n            className=\"block w-full px-3 py-2 text-sm text-white transition-colors border rounded-lg outline-none bg-gray-700/90 border-violet-500/40 hover:border-violet-500 focus:border-violet-400\"\r\n          >\r\n            {[2, 3, 4, 5, 6, 7, 8].map((id) => (\r\n              <option key={id} value={id}>\r\n                {playerNames[id]}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Rounds 2 and 4 inputs in a separate flex container */}\r\n      <div className=\"flex flex-wrap gap-4\">\r\n        {/* Rounds 2 and 4 inputs */}\r\n        {[2, 4].map((round) => (\r\n          <div\r\n            key={`input-r${round}`}\r\n            className=\"flex-1 min-w-[180px] p-3 bg-gray-800/90 border border-violet-500/30 rounded-lg shadow-lg hover:border-violet-500/50 transition-all\"\r\n          >\r\n            <h3 className=\"mb-3 text-base font-bold text-white\">\r\n              Round {round}\r\n            </h3>\r\n\r\n            <div className=\"space-y-3\">\r\n              <div className=\"group\">\r\n                <label className=\"block mb-1 text-sm font-semibold text-indigo-200\">\r\n                  {t.yourOpponent}\r\n                </label>\r\n                <SelectedPlayer\r\n                  playerId={opponents.player1[round]}\r\n                  playerNames={playerNames}\r\n                />\r\n                <select\r\n                  value={opponents.player1[round] || \"\"}\r\n                  onChange={(e) =>\r\n                    handleOpponentChange(\"player1\", round, e.target.value)\r\n                  }\r\n                  className=\"block w-full px-3 py-2 text-sm text-white transition-colors border rounded-lg outline-none bg-gray-700/90 border-violet-500/40 hover:border-violet-500 focus:border-violet-400\"\r\n                >\r\n                  {getR24OpponentOptions(1, round)}\r\n                </select>\r\n              </div>\r\n\r\n              <div className=\"group\">\r\n                <label className=\"block mb-1 text-sm font-semibold text-indigo-200\">\r\n                  {playerNames[firstOpponentId]}'s {t.opponent}\r\n                </label>\r\n                <SelectedPlayer\r\n                  playerId={opponents.player8[round]}\r\n                  playerNames={playerNames}\r\n                />\r\n                <select\r\n                  value={opponents.player8[round] || \"\"}\r\n                  onChange={(e) =>\r\n                    handleOpponentChange(\"player8\", round, e.target.value)\r\n                  }\r\n                  className=\"block w-full px-3 py-2 text-sm text-white transition-colors border rounded-lg outline-none bg-gray-700/90 border-violet-500/40 hover:border-violet-500 focus:border-violet-400\"\r\n                >\r\n                  {getR24OpponentOptions(firstOpponentId, round)}\r\n                </select>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Round 6 Helpers - Only show the first helper */}\r\n      <div className=\"grid grid-cols-1 gap-4 mt-4\">\r\n        {/* Your R6 Helper */}\r\n        {opponents.player1[3] && (\r\n          <div className=\"p-3 overflow-hidden transition-all border rounded-lg shadow-lg bg-gray-800/90 border-violet-500/30 animate-fadeIn hover:border-violet-500/50\">\r\n            <h3 className=\"mb-2 text-sm font-bold text-violet-300\">\r\n              {t.r6Helper.you}\r\n            </h3>\r\n            <div className=\"space-y-2\">\r\n              <div className=\"text-sm text-gray-200\">\r\n                {t.r6Helper.yourR3}{\" \"}\r\n                <strong className=\"text-violet-200\">\r\n                  {playerNames[opponents.player1[3]]}\r\n                </strong>\r\n                {t.r6Helper.r5Match}\r\n              </div>\r\n              <SelectedPlayer\r\n                playerId={round3OpponentR5Match}\r\n                playerNames={playerNames}\r\n              />\r\n              <select\r\n                value={round3OpponentR5Match || \"\"}\r\n                onChange={(e) => {\r\n                  if (e.target.value === \"0\") {\r\n                    setRound3OpponentR5Match(null);\r\n                    setFirstRound3OpponentR5Match(null); // Reset second helper when first helper is canceled\r\n                    setOpponents((prev) => {\r\n                      const newOpponents = { ...prev };\r\n                      newOpponents.player1[6] = null;\r\n                      newOpponents.player8[6] = null; // Also reset opponent's R6 selection\r\n                      newOpponents.player1[7] = null;\r\n                      newOpponents.player8[7] = null;\r\n                      return newOpponents;\r\n                    });\r\n                  } else {\r\n                    setRound3OpponentR5Match(\r\n                      e.target.value === \"\" ? null : parseInt(e.target.value)\r\n                    );\r\n                  }\r\n                }}\r\n                className=\"block w-full px-3 py-2 text-sm text-white transition-colors border rounded-lg outline-none bg-gray-700/90 border-violet-500/40 hover:border-violet-500 focus:border-violet-400\"\r\n              >\r\n                {getOpponentOptions(opponents.player1[3])}\r\n              </select>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <PredictionsTable\r\n        currentRound={currentRound}\r\n        opponents={opponents}\r\n        playerNames={playerNames}\r\n        firstOpponentId={firstOpponentId}\r\n        t={t}\r\n        getOpponentDisplay={getOpponentDisplay}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(MatchInputs);\r\n"],"names":["TableRow","memo","_ref","round","player1Display","player8Display","noteText","_jsxs","className","isDeterministic","children","_jsx","_ref2","currentRound","opponents","playerNames","firstOpponentId","t","getOpponentDisplay","getNoteText","noteTexts","random","swapR2","swapR4","r3R5","swapR6","getCustomOpponentDisplay","player","display","props","includes","React","replace","predictions","yourOpponent","opponentOf","notes","Array","from","length","_","i","map","SelectedPlayer","playerId","MatchInputs","setOpponents","round3OpponentR5Match","setRound3OpponentR5Match","firstRound3OpponentR5Match","setFirstRound3OpponentR5Match","handleOpponentChange","handleFirstOpponentChange","resetMatchData","getR24OpponentOptions","playerNumber","usedOpponents","getAllUsedOpponents","_Fragment","value","select","id","has","matchInputs","onClick","resetMatches","firstOpponent","onChange","e","target","player1","opponent","player8","r6Helper","you","yourR3","r5Match","prev","newOpponents","parseInt","filter","getOpponentOptions","PredictionsTable","playerNum","getRound3Opponent","getFirstRound3Opponent","needInput","waiting","predict","notSet"],"sourceRoot":""}