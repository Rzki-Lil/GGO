{"version":3,"file":"static/js/155.5322b80f.chunk.js","mappings":"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","sources":["components/PredictionsTable.jsx","components/MatchInputs.jsx"],"sourcesContent":["import React, { memo, useState } from \"react\";\r\nimport { isDeterministic } from \"../utils/gameUtils\";\r\n\r\nconst TableRow = memo(\r\n  ({ round, player1Display, player8Display, isSelected, onRowClick }) => {\r\n    const modifiedPlayer1Display =\r\n      isSelected && player1Display && player1Display.props\r\n        ? React.cloneElement(player1Display, {\r\n            className: player1Display.props.className\r\n              .replace(\"text-emerald-300\", \"text-white\")\r\n              .replace(\"text-indigo-400\", \"text-white\"),\r\n          })\r\n        : player1Display;\r\n\r\n    const modifiedPlayer8Display =\r\n      isSelected && player8Display && player8Display.props\r\n        ? React.cloneElement(player8Display, {\r\n            className: player8Display.props.className\r\n              .replace(\"text-indigo-300\", \"text-white\")\r\n              .replace(\"text-indigo-400\", \"text-white\")\r\n              .replace(\"text-gray-400\", \"text-white\"),\r\n          })\r\n        : player8Display;\r\n\r\n    return (\r\n      <tr\r\n        onClick={() => onRowClick(round)}\r\n        className={`\r\n          border-b border-gray-800\r\n          ${isDeterministic(round) ? \"bg-violet-900/20\" : \"bg-gray-900/80\"}\r\n          ${\r\n            isSelected ? \"!bg-emerald-800 border-l-4 !border-l-emerald-500\" : \"\"\r\n          }\r\n          hover:bg-gray-800 transition-colors cursor-pointer\r\n        `}\r\n      >\r\n        <td\r\n          className={`px-3 py-2 text-sm whitespace-nowrap ${\r\n            isSelected ? \"text-white\" : \"text-gray-200\"\r\n          }`}\r\n        >\r\n          {round}\r\n        </td>\r\n        <td className=\"px-3 py-2 text-sm font-medium whitespace-nowrap\">\r\n          {modifiedPlayer1Display}\r\n        </td>\r\n        <td className=\"px-3 py-2 text-sm whitespace-nowrap\">\r\n          {modifiedPlayer8Display}\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n);\r\n\r\nconst PredictionsTable = memo(\r\n  ({\r\n    currentRound,\r\n    opponents,\r\n    playerNames,\r\n    firstOpponentId,\r\n    getOpponentDisplay,\r\n  }) => {\r\n    const [selectedRound, setSelectedRound] = useState(null);\r\n\r\n    const handleRowClick = (round) => {\r\n      setSelectedRound(selectedRound === round ? null : round);\r\n    };\r\n\r\n    const getCustomOpponentDisplay = (player, round) => {\r\n      const display = getOpponentDisplay(player, round);\r\n\r\n      if (display && display.props) {\r\n        if (player === \"player1\") {\r\n          if (display.props.className.includes(\"text-indigo-300\")) {\r\n            return React.cloneElement(display, {\r\n              className: display.props.className.replace(\r\n                \"text-indigo-300\",\r\n                \"text-emerald-300\"\r\n              ),\r\n            });\r\n          } else if (display.props.className.includes(\"text-indigo-400\")) {\r\n            return display;\r\n          }\r\n        }\r\n      }\r\n\r\n      return display;\r\n    };\r\n\r\n    return (\r\n      <div className=\"mt-4 overflow-hidden border rounded-lg shadow-lg bg-gray-900/95 border-violet-500/30\">\r\n        <div className=\"px-4 py-2 bg-gradient-to-r from-violet-900/80 via-indigo-900/80 to-purple-900/80\">\r\n          <h2 className=\"text-lg font-bold text-white\">Prediksi</h2>\r\n        </div>\r\n        <div className=\"overflow-x-auto\">\r\n          <table className=\"min-w-full border-collapse\">\r\n            <thead className=\"bg-gray-800/90\">\r\n              <tr>\r\n                <th className=\"px-3 py-2 text-xs font-medium tracking-wider text-left text-indigo-300\">\r\n                  Ronde\r\n                </th>\r\n                <th className=\"px-3 py-2 text-xs font-medium tracking-wider text-left text-emerald-300\">\r\n                  Lawan Kamu\r\n                </th>\r\n                <th className=\"px-3 py-2 text-xs font-medium tracking-wider text-left text-indigo-300\">\r\n                  {playerNames[firstOpponentId]}\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {Array.from({ length: currentRound }, (_, i) => i + 1).map(\r\n                (round) => (\r\n                  <TableRow\r\n                    key={round}\r\n                    round={round}\r\n                    player1Display={getCustomOpponentDisplay(\"player1\", round)}\r\n                    player8Display={getOpponentDisplay(\"player8\", round)}\r\n                    isSelected={selectedRound === round}\r\n                    onRowClick={handleRowClick}\r\n                  />\r\n                )\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default PredictionsTable;\r\n","import React from \"react\";\r\nimport PredictionsTable from \"./PredictionsTable\";\r\nimport {\r\n  isDeterministic,\r\n  getAllUsedOpponents,\r\n  getRound3Opponent,\r\n  getFirstRound3Opponent,\r\n} from \"../utils/gameUtils\";\r\n\r\nconst MatchInputs = ({\r\n  opponents,\r\n  setOpponents,\r\n  playerNames,\r\n  firstOpponentId,\r\n  currentRound,\r\n  round3OpponentR5Match,\r\n  setRound3OpponentR5Match,\r\n  firstRound3OpponentR5Match,\r\n  setFirstRound3OpponentR5Match,\r\n  handleOpponentChange,\r\n  handleFirstOpponentChange,\r\n  resetMatchData,\r\n}) => {\r\n  const getOpponentOptions = (playerNumber) => {\r\n    const usedOpponents = getAllUsedOpponents(\r\n      opponents,\r\n      round3OpponentR5Match,\r\n      firstRound3OpponentR5Match\r\n    );\r\n\r\n    return (\r\n      <>\r\n        <option value={0} className=\"text-white\">\r\n          Batal\r\n        </option>\r\n        {[1, 2, 3, 4, 5, 6, 7, 8]\r\n          .filter((i) => {\r\n            if (i === playerNumber) return false;\r\n\r\n            if (i === round3OpponentR5Match) return true;\r\n            return !usedOpponents.has(i);\r\n          })\r\n          .map((i) => (\r\n            <option key={i} value={i} className=\"text-gray-200\">\r\n              {playerNames[i]}\r\n            </option>\r\n          ))}\r\n      </>\r\n    );\r\n  };\r\n\r\n  const getR24OpponentOptions = (playerNumber, round) => {\r\n    const usedOpponents = getAllUsedOpponents(\r\n      opponents,\r\n      round3OpponentR5Match,\r\n      firstRound3OpponentR5Match\r\n    );\r\n\r\n    return (\r\n      <>\r\n        <option value={0} className=\"text-white\">\r\n          Batal\r\n        </option>\r\n        {[2, 3, 4, 5, 6, 7, 8]\r\n          .filter((i) => {\r\n            if (i === playerNumber || i === firstOpponentId) return false;\r\n\r\n            const currentSelection =\r\n              playerNumber === 1\r\n                ? opponents.player1[round]\r\n                : opponents.player8[round];\r\n\r\n            if (i === currentSelection) return true;\r\n\r\n            return !usedOpponents.has(i);\r\n          })\r\n          .map((i) => (\r\n            <option key={i} value={i} className=\"text-gray-200\">\r\n              {playerNames[i]}\r\n            </option>\r\n          ))}\r\n      </>\r\n    );\r\n  };\r\n\r\n  const getOpponentDisplay = (player, round) => {\r\n    const playerNum = player === \"player1\" ? 1 : 8;\r\n    const opponent = opponents[player][round];\r\n\r\n    if (opponent) {\r\n      return (\r\n        <span className=\"font-medium text-indigo-300\">\r\n          {playerNames[opponent]}\r\n        </span>\r\n      );\r\n    }\r\n\r\n    if (isDeterministic(round)) {\r\n      if (\r\n        (round === 6 &&\r\n          playerNum === 1 &&\r\n          getRound3Opponent(opponents) &&\r\n          !round3OpponentR5Match) ||\r\n        (round === 6 &&\r\n          playerNum === 8 &&\r\n          getFirstRound3Opponent(opponents) &&\r\n          !firstRound3OpponentR5Match)\r\n      ) {\r\n        return (\r\n          <span className=\"font-medium text-indigo-400\">\r\n            Perlu input di atas ⬆️\r\n          </span>\r\n        );\r\n      }\r\n\r\n      if (\r\n        (round === 3 && !opponents.player8[2] && player === \"player1\") ||\r\n        (round === 3 && !opponents.player1[2] && player === \"player8\") ||\r\n        (round === 5 && !opponents.player8[4] && player === \"player1\") ||\r\n        (round === 5 && !opponents.player1[4] && player === \"player8\")\r\n      ) {\r\n        return (\r\n          <span className=\"font-medium text-indigo-400\">Menunggu input...</span>\r\n        );\r\n      }\r\n\r\n      return <span className=\"font-medium text-indigo-400\">Prediksi...</span>;\r\n    }\r\n\r\n    return <span className=\"text-gray-400\">Belum diset</span>;\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-4 transition-all border rounded-lg shadow-xl bg-gray-900/80 backdrop-blur-md border-violet-500/30 hover:shadow-violet-500/10 lg:col-span-2\">\r\n      <div className=\"flex items-center justify-between mb-4\">\r\n        <h2 className=\"text-lg font-bold text-white\">Input Pertandingan</h2>\r\n        <button\r\n          onClick={resetMatchData}\r\n          className=\"px-3 py-1 text-xs font-medium text-white transition-colors rounded-md shadow-md bg-red-700/90 hover:bg-red-600\"\r\n        >\r\n          Reset\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"w-full p-3 mb-4 transition-all border rounded-lg shadow-lg bg-gray-800/90 border-violet-500/30 hover:border-violet-500/50\">\r\n        <h3 className=\"mb-3 text-base font-bold text-white\">\r\n          Lawan Pertama Kamu:\r\n        </h3>\r\n        <div className=\"w-full\">\r\n          <select\r\n            value={firstOpponentId}\r\n            onChange={(e) => handleFirstOpponentChange(e.target.value)}\r\n            className=\"block w-full px-3 py-2 text-sm text-white transition-colors border rounded-lg outline-none bg-gray-700/90 border-violet-500/40 hover:border-violet-500 focus:border-violet-400\"\r\n          >\r\n            {[2, 3, 4, 5, 6, 7, 8].map((id) => (\r\n              <option key={id} value={id}>\r\n                {playerNames[id]}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"flex flex-wrap gap-4\">\r\n        {/* Rounds 2 and 4 inputs */}\r\n        {[2, 4].map((round) => (\r\n          <div\r\n            key={`input-r${round}`}\r\n            className=\"flex-1 min-w-[180px] p-3 bg-gray-800/90 border border-violet-500/30 rounded-lg shadow-lg hover:border-violet-500/50 transition-all\"\r\n          >\r\n            <h3 className=\"mb-3 text-base font-bold text-white\">\r\n              Ronde {round}\r\n            </h3>\r\n\r\n            <div className=\"space-y-3\">\r\n              <div className=\"group\">\r\n                <label className=\"block mb-1 text-sm font-semibold text-indigo-200\">\r\n                  Lawan Kamu\r\n                </label>\r\n                <select\r\n                  value={opponents.player1[round] || 0}\r\n                  onChange={(e) =>\r\n                    handleOpponentChange(\"player1\", round, e.target.value)\r\n                  }\r\n                  className=\"block w-full px-3 py-2 text-sm text-white transition-colors border rounded-lg outline-none bg-gray-700/90 border-violet-500/40 hover:border-violet-500 focus:border-violet-400\"\r\n                >\r\n                  {getR24OpponentOptions(1, round)}\r\n                </select>\r\n              </div>\r\n\r\n              <div className=\"group\">\r\n                <label className=\"block mb-1 text-sm font-semibold text-indigo-200\">\r\n                  Lawan dari {playerNames[firstOpponentId]}\r\n                </label>\r\n                <select\r\n                  value={opponents.player8[round] || 0}\r\n                  onChange={(e) =>\r\n                    handleOpponentChange(\"player8\", round, e.target.value)\r\n                  }\r\n                  className=\"block w-full px-3 py-2 text-sm text-white transition-colors border rounded-lg outline-none bg-gray-700/90 border-violet-500/40 hover:border-violet-500 focus:border-violet-400\"\r\n                >\r\n                  {getR24OpponentOptions(firstOpponentId, round)}\r\n                </select>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 gap-4 mt-4\">\r\n        {/* Your R6 Helper */}\r\n        {opponents.player1[3] && (\r\n          <div className=\"p-3 overflow-hidden transition-all border rounded-lg shadow-lg bg-gray-800/90 border-violet-500/30 animate-fadeIn hover:border-violet-500/50\">\r\n            <h3 className=\"mb-3 text-base font-bold text-white\">Ronde 6 & 7</h3>\r\n            <div className=\"space-y-2\">\r\n              <div className=\"text-sm text-gray-200\">\r\n                Lawan{\" \"}\r\n                <strong className=\"text-violet-200\">\r\n                  {playerNames[opponents.player1[3]]}\r\n                </strong>\r\n                {\" di Ronde 5\"}\r\n              </div>\r\n              <select\r\n                value={round3OpponentR5Match || 0}\r\n                onChange={(e) => {\r\n                  if (e.target.value === \"0\") {\r\n                    setRound3OpponentR5Match(null);\r\n                    setFirstRound3OpponentR5Match(null);\r\n                    setOpponents((prev) => {\r\n                      const newOpponents = { ...prev };\r\n                      newOpponents.player1[6] = null;\r\n                      newOpponents.player8[6] = null;\r\n                      newOpponents.player1[7] = null;\r\n                      newOpponents.player8[7] = null;\r\n                      return newOpponents;\r\n                    });\r\n                  } else {\r\n                    const newValue = parseInt(e.target.value);\r\n                    setRound3OpponentR5Match(newValue);\r\n\r\n                    setOpponents((prev) => {\r\n                      const newOpponents = { ...prev };\r\n                      newOpponents.player1[6] = newValue;\r\n\r\n                      const usedOpponents = getAllUsedOpponents(\r\n                        prev,\r\n                        newValue,\r\n                        null\r\n                      );\r\n\r\n                      const availablePlayers = [2, 3, 4, 5, 6, 7, 8].filter(\r\n                        (id) =>\r\n                          id !== firstOpponentId &&\r\n                          id !== newValue &&\r\n                          !usedOpponents.has(id)\r\n                      );\r\n\r\n                      if (availablePlayers.length === 1) {\r\n                        newOpponents.player8[6] = availablePlayers[0];\r\n                        setFirstRound3OpponentR5Match(availablePlayers[0]);\r\n\r\n                        newOpponents.player1[7] = availablePlayers[0];\r\n                        newOpponents.player8[7] = newValue;\r\n                      } else {\r\n\r\n                        newOpponents.player8[6] = null;\r\n                        newOpponents.player1[7] = null;\r\n                        newOpponents.player8[7] = null;\r\n                        setFirstRound3OpponentR5Match(null);\r\n                      }\r\n\r\n                      return newOpponents;\r\n                    });\r\n                  }\r\n                }}\r\n                className=\"block w-full px-3 py-2 text-sm text-white transition-colors border rounded-lg outline-none bg-gray-700/90 border-violet-500/40 hover:border-violet-500 focus:border-violet-400\"\r\n              >\r\n                {getOpponentOptions(opponents.player1[3])}\r\n              </select>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <PredictionsTable\r\n        currentRound={currentRound}\r\n        opponents={opponents}\r\n        playerNames={playerNames}\r\n        firstOpponentId={firstOpponentId}\r\n        getOpponentDisplay={getOpponentDisplay}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(MatchInputs);\r\n"],"names":["TableRow","memo","_ref","round","player1Display","player8Display","isSelected","onRowClick","modifiedPlayer1Display","props","React","className","replace","modifiedPlayer8Display","_jsxs","onClick","isDeterministic","children","_jsx","_ref2","currentRound","opponents","playerNames","firstOpponentId","getOpponentDisplay","selectedRound","setSelectedRound","useState","handleRowClick","getCustomOpponentDisplay","player","display","includes","Array","from","length","_","i","map","MatchInputs","setOpponents","round3OpponentR5Match","setRound3OpponentR5Match","firstRound3OpponentR5Match","setFirstRound3OpponentR5Match","handleOpponentChange","handleFirstOpponentChange","resetMatchData","getR24OpponentOptions","playerNumber","usedOpponents","getAllUsedOpponents","_Fragment","value","filter","player1","player8","has","onChange","e","target","id","prev","newOpponents","newValue","parseInt","availablePlayers","getOpponentOptions","PredictionsTable","playerNum","opponent","getRound3Opponent","getFirstRound3Opponent"],"sourceRoot":""}